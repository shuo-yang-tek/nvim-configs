snippet ipa "import {Actions as xxx} from '...'" b
import {Actions as `!p

import re

postFix = 'Api'
if re.search('store/', t[1]):
   postFix = 'Act'

path = re.search('(?:store/|api/)(.+)', t[1])

if path:
   path = path.group(1)
   result = ''
   tokens = re.findall('([a-zA-Z]+)(?:-|/|$)', path)

   if len(tokens) == 0:
      snip.rv = ''

   for idx, tok in enumerate(tokens):
      if idx == 0:
         result += tok
      else:
         result += '{}{}'.format(tok[:1].upper(), tok[1:])
   snip.rv = result + postFix
else:
   snip.rv = ''

`} from '${1:/* ... */}';
$0
endsnippet

snippet cn "className=..." i
className=${0:/* ... */}
endsnippet

snippet ock "onClick={ ... }" i
onClick={ ${0:/* ... */} }
endsnippet

snippet ocg "onChange={ ... }" i
onChange={ ${0:/* ... */} }
endsnippet

snippet ops "onPress={ ... }" i
onPress={ ${0:/* ... */} }
endsnippet

snippet cdm "componentDidMount() {...}" b
componentDidMount() {
   ${0:/* ... */}
}
endsnippet

snippet cwm "componentWillMount() {...}" b
componentWillMount() {
   ${0:/* ... */}
}
endsnippet

snippet cdu "componentDidUnmount() {...}" b
componentDidUnmount() {
   ${0:/* ... */}
}
endsnippet

snippet cwu "componentWillUnmount() {...}" b
componentWillUnmount() {
${0:/* ... */}
}
endsnippet

snippet crrc "create React Component" b
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import autoBind from 'react-autobind';

class ${1:/* componentName */} extends Component {
   constructor(props) {
      super(props);
      autoBind(this);
   }

   render() {
      return (
	 $0
      );
   }
}

const styles = {
};

`!p
snip.rv = t[1]
`.propTypes = {
   ${2:/* ... */}
};

`!p
snip.rv = t[1]
`.defaultProps = {
   ${3:/* ... */}
};

export default connect(
   state => ({
      ${4:/* ... */}
   }),
   dispatch => ({
   })
)(`!p
snip.rv = t[1]
`);
endsnippet

snippet crra "create Redux Action" b
const namespace = '${1:/* namespace */}';

export const DEFAULT_STATE = {
   ${2:/* ... */}
};

const ACTION_TYPES = {`!p

import re
snip >> 1

keys = re.findall('(?:case\s+ACTION_TYPES\.)([a-zA-Z_][a-zA-Z0-9_]*)(?:\s*:)', t[3])

if len(keys) == 0:
   snip.rv = ''

for key in keys:
   tokens = re.findall('([a-z]+|[A-Z][a-z]*|[0-9]+)', key)
   content = '{}${{namespace}}/{}{}'.format(chr(96), '_'.join(tokens).upper(), chr(96))
   snip += '{}: {},'.format(key, content)

`
};

export function reducer(state = DEFAULT_STATE, action) {
   switch( action.type ) {
   ${3:/* ... */}
   default:
      return state;
   }
}

export const Actions = {`!p

from collections import OrderedDict
import re
snip >> 1

keys = re.findall('(?:case\s+ACTION_TYPES\.)([a-zA-Z_][a-zA-Z0-9_]*)(?:\s*:)', t[3])

if len(keys) == 0:
   snip.rv = ''

contents = t[3].split('case')
vals = {}
for idx, key in enumerate(keys):
   vals[key] = re.findall('(?:action\.)([a-zA-Z_][a-zA-Z0-9_]*)', contents[idx + 1])
   vals[key] = list(OrderedDict.fromkeys(vals[key]))

for key in keys:
   snip += '{}: ({}) => ({{'.format(key, ', '.join(vals[key]))
   snip >> 1
   snip += 'type: ACTION_TYPES.{},'.format(key)
   for val in vals[key]:
      snip += '{},'.format(val)
   snip << 1
   snip += '}),'

`
};$0
endsnippet

snippet crea "create redux-observable api" b
import Rx from 'rxjs/Rx';
import { combineEpics } from 'redux-observable';
import ajax from '${1:../helpers/ajax}';

$0

const namespace = '${2:/* ... */}';

const ACTION_TYPES = {`!p

import re
snip >> 1

names = re.findall('(?:const|let|var|function)(?:\s+)([a-zA-Z_][a-zA-Z0-9_]*)(?:Epic)', t[3])

if len(names) == 0:
   snip.rv = ''

for name in names:
   tokens = re.findall('([a-z]+|[A-Z][a-z]*|[0-9]+)', name)
   snip += '{}: {}${{namespace}}/{}{},'.format(name, chr(96), '_'.join(tokens).upper(), chr(96))

`
};

${3:/* define Epics */}

export const Actions = {`!p

import re
snip >> 1

names = re.findall('(?:const|let|var|function)(?:\s+)([a-zA-Z_][a-zA-Z0-9_]*)(?:Epic)', t[3])

if len(names) == 0:
   snip.rv = ''

for name in names:
   snip += '{}: () => ({{'.format(name)
   snip >> 1
   snip += 'type: ACTION_TYPES.{}'.format(name)
   snip << 1
   snip += '}),'

`
};

export const epic = combineEpics(`!p

import re
snip >> 1

names = re.findall('(?:const|let|var|function)(?:\s+)([a-zA-Z_][a-zA-Z0-9_]*Epic)', t[3])

if len(names) == 0:
   snip.rv = ''

for name in names:
   snip += '{},'.format(name)

`
);
endsnippet
